@page "/pedidos"
@attribute [StreamRendering]
@inject IDialogService DialogService



<PageTitle>Pedidos</PageTitle>

<h1>Pedidos</h1>

<p>This component demonstrates showing data.</p>

@if (orders == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <MudDataGrid Elevation="4" 
        T="Order" Items="@orders" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
    Hideable="true" RowClick="@RowClicked" >
        <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns >
            <PropertyColumn CellStyleFunc="@_cellStyleFunc"
            
                Property="x => x.company" Title="EMPRESA"></PropertyColumn>
            <PropertyColumn Property="x => x.deliverDate" Format="dd/MM/yyyy" Title="Fecha Entrega"></PropertyColumn>
            <PropertyColumn Property="x => x.provider" Title="Suministrador"></PropertyColumn>
            <PropertyColumn Property="x => x.cod_order" Title="Codigo Pedido"></PropertyColumn>
        </Columns> 
    </MudDataGrid>



    <MudExpansionPanels Style="flex:1">
        <MudExpansionPanel Text="Show Events">
            @foreach (var message in _events)
            {
                <MudText Typo="@Typo.body2">@message</MudText>
            }
            @if (_events.Count > 0)
            {
                <div class="d-flex">
                    <MudSpacer />
                    <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
                </div>
            }
        </MudExpansionPanel>
    </MudExpansionPanels>




}

@code{
    private Func<Order, string> _cellStyleFunc => x =>
       {
           string style = "";

           if (!x.company.Equals(""))
           {
               style += "background-color:var(--bs-gray-200);"+"color:black;";
               
               
           }

           return style;
       };
}

@code {
    private IEnumerable<Order>? orders;
    private List<string> _events = new();
    private string _searchString;


    protected override async Task OnInitializedAsync()
    {

        List<Order> orders = new List<Order>();
        SqlConnection conn;

        conn = new SqlConnection("Data Source = dbserver.chicolino.net; Initial Catalog = RPSNext_Grupo; User id=RPSUser;Password=123");
        conn.Open();

        SqlCommand cmd = conn.CreateCommand();
        cmd.CommandText = "SELECT  GC.Description AS Company  ,PO.ReceptionDemandDate , PS.Description AS Suministrador , PO.CodOrder AS Codigo_Pedido, OL.Description AS des_art ,OL.Quantity  FROM dbo.PUROrderLine OL   LEFT JOIN dbo.PUROrder PO ON OL.IDOrder = PO.IDOrder LEFT JOIN dbo.PURSupplier PS ON PO.IDSupplier = PS.IDSupplier   LEFT JOIN dbo.STKArticle AR ON OL.IDArticle = AR.IDArticle    LEFT JOIN dbo.GENCompany GC ON OL.CodCompany = GC.CodCompany   WHERE OL.CodCompany LIKE'0%'    AND OL.PendingReceive = 1  AND YEAR(PO.ReceptionDemandDate)> 2021;";

        SqlDataAdapter da = new SqlDataAdapter(cmd);
        DataTable result = new DataTable();

        da.Fill(result);
        da.Dispose();

        foreach (DataRow r in result.Rows)
        {
            Order? addOrder = orders.FirstOrDefault(o => o.cod_order == r["Codigo_Pedido"].ToString());
            if (addOrder!=null)
            {
                addOrder = orders.Find(o => o.cod_order == r["Codigo_Pedido"].ToString());
                OrderLine neworderLine = new OrderLine(r["des_art"].ToString(), (Decimal)r["Quantity"]);
                addOrder.orderLines.Add(neworderLine);
                addOrder.artKeywords +=" "+r["des_art"];

            }
            else
            {
                addOrder = new Order(DateTime.Parse(r["ReceptionDemandDate"].ToString()), r["Suministrador"].ToString(), r["Codigo_Pedido"].ToString(), r["Company"].ToString());
                OrderLine neworderLine = new OrderLine(r["des_art"].ToString(), (Decimal)r["Quantity"]);
                addOrder.orderLines.Add(neworderLine);
                addOrder.artKeywords += " " + r["des_art"];
                orders.Add(addOrder);
            }
        }
        conn.Close();
        this.orders = orders.ToArray();


    }


    public class Order
    {

        public DateTime deliverDate { get; set; }
        public string provider { get; set; }
        public string company { get; set; }
        public string cod_order { get; set; }
        public List<OrderLine>? orderLines;
        public string artKeywords { get; set; }

        public Order(DateTime deliverDate, string clientDescription, string cod_order,string company)
        {
            this.deliverDate = deliverDate;
            this.provider = clientDescription;
            this.cod_order = cod_order;
            this.company = company;
            this.orderLines = new();
            this.artKeywords = "";
        }

    }
    public class OrderLine
    {
        public decimal quantity { get; set; }
        public string desc_art { get; set; }
        public OrderLine(string desc_art, Decimal quantity)
            {
                this.desc_art = desc_art;
                this.quantity = quantity;
            }

    }



    void RowClicked(DataGridRowClickEventArgs<Order> args)
    {
        @*vents.Add(args.Item.cod_order);
        var options = new DialogOptions { CloseOnEscapeKey = true };
            DialogService.Show<PedidoDialog>("Pedido", options);*@
        try{
            var parameters = new DialogParameters { { "orderDetails", args.Item } };
            DialogService.Show<MyDialog>(args.Item.cod_order, parameters);
        }catch(Exception e)
        {
            _events.Add(e.Message.ToString());
        }
    }


    private Func<Order, bool> _quickFilter => x =>
       {
       if (string.IsNullOrWhiteSpace(_searchString))
           return true;

       if (x.company.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
           return true;

       if (x.provider.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
           return true;

        if (x.cod_order.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
           return true;

         if (x.artKeywords.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
           return true;

       return false;
       };
}

